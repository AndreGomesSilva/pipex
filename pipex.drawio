<mxfile host="drawio-plugin" modified="2023-09-22T21:37:26.610Z" agent="5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36" etag="eo4UDAAoSnsFoRPJAKc6" version="20.5.3" type="embed"><diagram name="Page-1" id="pPrzkzqE8NjMVCmVeS8H"><mxGraphModel dx="640" dy="1501" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="850" pageHeight="1100" math="0" shadow="0"><root><mxCell id="0"/><mxCell id="1" parent="0"/><mxCell id="0gh15mz6K9KzKyFZ07gb-6" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" parent="1" source="0gh15mz6K9KzKyFZ07gb-3" edge="1"><mxGeometry relative="1" as="geometry"><mxPoint x="710" y="340" as="targetPoint"/></mxGeometry></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-3" value="command 1" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1"><mxGeometry x="310" y="310" width="120" height="60" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-5" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="0gh15mz6K9KzKyFZ07gb-4" target="0gh15mz6K9KzKyFZ07gb-3" edge="1"><mxGeometry relative="1" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-4" value="File Input" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1"><mxGeometry x="340" y="200" width="60" height="30" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-7" value="output is weitten to end[1]" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1"><mxGeometry x="450" y="370" width="60" height="30" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-8" value="end[1] becomes stdout of command 1" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1"><mxGeometry x="530" y="360" width="145" height="55" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-11" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0;entryY=0.5;entryDx=0;entryDy=0;" parent="1" source="0gh15mz6K9KzKyFZ07gb-10" target="0gh15mz6K9KzKyFZ07gb-18" edge="1"><mxGeometry relative="1" as="geometry"><mxPoint x="1310" y="340" as="targetPoint"/><Array as="points"/></mxGeometry></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-10" value="PIPE()" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1"><mxGeometry x="712.5" y="240" width="230" height="200" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-12" value="&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;pipe()&amp;nbsp; creates&amp;nbsp; a pipe, a unidirectional data channel that can be used&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;for interprocess communication.&amp;nbsp; The array pipefd is used to return two&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;file&amp;nbsp; descriptors&amp;nbsp; referring to the ends of the pipe.&amp;nbsp; pipefd[0] refers&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;to the read end of the pipe.&amp;nbsp; pipefd[1] refers to the write end of&amp;nbsp; the&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;pipe.&amp;nbsp; &amp;nbsp;Data&amp;nbsp; written&amp;nbsp; to&amp;nbsp; the write end of the pipe is buffered by the&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;kernel until it is read from the read end of the pipe.&lt;/font&gt;&lt;/div&gt;" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;fillColor=#fff2cc;strokeColor=#d6b656;" parent="1" vertex="1"><mxGeometry x="560" y="-70" width="535" height="200" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-13" value="end[1]" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#f8cecc;strokeColor=#b85450;" parent="1" vertex="1"><mxGeometry x="740" y="380" width="50" height="40" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-14" value="end[0]" style="rounded=0;whiteSpace=wrap;html=1;fillColor=#d5e8d4;strokeColor=#82b366;" parent="1" vertex="1"><mxGeometry x="860" y="380" width="50" height="40" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-16" value="" style="endArrow=classic;startArrow=classic;html=1;rounded=0;entryX=0;entryY=0.5;entryDx=0;entryDy=0;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" parent="1" source="0gh15mz6K9KzKyFZ07gb-13" target="0gh15mz6K9KzKyFZ07gb-14" edge="1"><mxGeometry width="50" height="50" relative="1" as="geometry"><mxPoint x="860" y="600" as="sourcePoint"/><mxPoint x="910" y="550" as="targetPoint"/></mxGeometry></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-17" value="end[0] reads end[1] and sends command 1 output to command 2" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1"><mxGeometry x="970" y="360" width="200" height="70" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-23" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" parent="1" source="0gh15mz6K9KzKyFZ07gb-18" target="0gh15mz6K9KzKyFZ07gb-22" edge="1"><mxGeometry relative="1" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-18" value="command 2" style="rounded=0;whiteSpace=wrap;html=1;" parent="1" vertex="1"><mxGeometry x="1440" y="310" width="120" height="60" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-19" value="end [0]&lt;br&gt;becomes stdin command2" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1"><mxGeometry x="1190" y="352.5" width="200" height="70" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-22" value="Output File" style="text;html=1;strokeColor=none;fillColor=none;align=center;verticalAlign=middle;whiteSpace=wrap;rounded=0;" parent="1" vertex="1"><mxGeometry x="1470" y="450" width="60" height="30" as="geometry"/></mxCell><mxCell id="0gh15mz6K9KzKyFZ07gb-25" value="&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;fork()&amp;nbsp; creates&amp;nbsp; a&amp;nbsp; new&amp;nbsp; process by duplicating the calling process.&amp;nbsp; The new process is referred to as the&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;child process.&amp;nbsp; The calling process is referred to as the parent process.&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&lt;br&gt;&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;The child process and the parent process run in separate memory spaces.&amp;nbsp; At the time of fork() both&amp;nbsp; memory&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;spaces have the same content.&amp;nbsp; Memory writes, file mappings (mmap(2)), and unmappings (munmap(2)) performed&lt;/font&gt;&lt;/div&gt;&lt;div&gt;&lt;font color=&quot;#000000&quot;&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp;by one of the processes do not affect the other.&lt;/font&gt;&lt;/div&gt;" style="shape=parallelogram;perimeter=parallelogramPerimeter;whiteSpace=wrap;html=1;fixedSize=1;fillColor=#ffe6cc;strokeColor=#d79b00;" parent="1" vertex="1"><mxGeometry x="580" y="-350" width="750" height="210" as="geometry"/></mxCell></root></mxGraphModel></diagram></mxfile>